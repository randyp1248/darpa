/* -*- c++ -*- */
/* 
 * Copyright 2013 TRITONS
 *
 * Despread input constellation stream and correlate with each row of the
 * walsh table to determine the index bits to output.
 *
 * <<<=================================================================>>>
 * <<<=================================================================>>>
 * <<< This file is autogenerated from pngen.pl.  Do not edit directly >>>
 * <<<=================================================================>>>
 * <<<=================================================================>>>
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gr_io_signature.h>
#include "despreader_cb_impl.h"

namespace gr {
namespace spreader {

static const int MIN_IN = 1;
static const int MAX_IN = 1;
static const int MIN_OUT = 1;
static const int MAX_OUT = 1;

despreader_cb::sptr
despreader_cb::make()
{
   return gnuradio::get_initial_sptr (new despreader_cb_impl());
}

despreader_cb_impl::despreader_cb_impl()
   : gr_block("despreader_cb",
		  gr_make_io_signature(MIN_IN, MAX_IN, sizeof (gr_complex)),
		  gr_make_io_signature(MIN_OUT, MAX_OUT, sizeof (unsigned char)))
{
}

despreader_cb_impl::~despreader_cb_impl()
{
}

void
despreader_cb_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
   /* <+forecast+> e.g. ninput_items_required[0] = noutput_items */
}

int
despreader_cb_impl::general_work (int noutput_items,
		   gr_vector_int &ninput_items,
		   gr_vector_const_void_star &input_items,
		   gr_vector_void_star &output_items)
{
   const gr_complex* in = (gr_complex*) input_items[0];
   unsigned char* out = (unsigned char*) output_items[0];

   consume_each (noutput_items);

   return noutput_items;
}

} /* namespace spreader */
} /* namespace gr */

