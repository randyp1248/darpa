/* -*- c++ -*- */
/* 
 * Copyright 2013 TRITONS
 *
 * Spread input bits with an indexed walsh code and map to constellation.
 *
 * <<<====================================================================>>>
 * <<<====================================================================>>>
 * <<< This file is autogenerated from walshgen.pl.  Do not edit directly >>>
 * <<<====================================================================>>>
 * <<<====================================================================>>>
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gr_io_signature.h>
#include "spreader_bc_impl.h"
#include <stdio.h>

namespace gr {
namespace spreader {

static const int MIN_IN = 1;
static const int MAX_IN = 1;
static const int MIN_OUT = 1;
static const int MAX_OUT = 1;

static gr_complex* walshPosPos;
static gr_complex* walshPosNeg;
static gr_complex* walshNegPos;
static gr_complex* walshNegNeg;

gr_complex* spreader_bc_impl::walshTable[128][64];
gr_complex* spreader_bc_impl::negWalshTable[128][64];
char* walshData = "";

spreader_bc::sptr
spreader_bc::make()
{
  return gnuradio::get_initial_sptr (new spreader_bc_impl());
}

spreader_bc_impl::spreader_bc_impl()
   : gr_block("spreader_bc",
                  gr_make_io_signature(MIN_IN, MAX_IN, sizeof(unsigned char)),
                  gr_make_io_signature(MIN_OUT, MAX_OUT, sizeof(gr_complex)))
{
    set_min_noutput_items(1 * 8 / 8 * 64);
    set_max_noutput_items(1 * 8 / 8 * 64);
    walshPosPos = new gr_complex( +0.7071067811865475, +0.7071067811865475);
    walshPosNeg = new gr_complex( +0.7071067811865475, -0.7071067811865475);
    walshNegPos = new gr_complex( -0.7071067811865475, +0.7071067811865475);
    walshNegNeg = new gr_complex( -0.7071067811865475, -0.7071067811865475);

    char* dataPtr = walshData;
    for(int row=0; row<128; ++row)
    {
        for(int column=0; column<128/2; ++column)
	{
	    switch(*(dataPtr++))
	    {
	        case 'N':
	            walshTable[row][column] = walshNegNeg;
	            negWalshTable[row][column] = walshPosPos;
		    break;
	        case 'n':
	            walshTable[row][column] = walshNegPos;
	            negWalshTable[row][column] = walshPosNeg;
		    break;
	        case 'p':
	            walshTable[row][column] = walshPosNeg;
	            negWalshTable[row][column] = walshNegPos;
		    break;
	        case 'P':
	            walshTable[row][column] = walshPosPos;
	            negWalshTable[row][column] = walshNegNeg;
		    break;
	    }
	}
    }
}

spreader_bc_impl::~spreader_bc_impl()
{
}

void
spreader_bc_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
   ninput_items_required[0] = 1;
}

int
spreader_bc_impl::general_work (int noutput_items,
                   gr_vector_int &ninput_items,
                   gr_vector_const_void_star &input_items,
                   gr_vector_void_star &output_items)
{
   const unsigned char* in = (unsigned char*) input_items[0];
   gr_complex* out = (gr_complex*) output_items[0];

   unsigned index;
   unsigned sign;

   if ((noutput_items < (1 * 8 / 8 * 64)) ||
       (ninput_items[0] < 1))
   {
      return 0;
   }

   index = (((
         (((unsigned)in[0])<<24) | 
         (((unsigned)in[0+1])<<16) | 
         (((unsigned)in[0+2])<<8) | 
         (((unsigned)in[0+3]))
      ) >> (32-0-8)) & ((1<<8)-1));
   sign = index & 0x01;
   index >>= 1;
//printf("=======================================\n");
//printf("Spreading index: %d  sign: %d\n", index, sign);
   for(int i=0; i<64; ++i)
   {
      memcpy(
         out+0*64+i, 
         (sign ? (negWalshTable[index][i]) : (walshTable[index][i])), 
         sizeof(gr_complex));
   }


   consume_each (1);

   return (1 * 8 / 8 * 64);
}

} /* namespace spreader */
} /* namespace gr */

