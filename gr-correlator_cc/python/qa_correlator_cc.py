#!/usr/bin/env python
# 
#  Copyright 2013 TRITONS
#
#  <<<=================================================================>>>
#  <<<=================================================================>>>
#  <<< This file is autogenerated from pngen.pl.  Do not edit directly >>>
#  <<<=================================================================>>>
#  <<<=================================================================>>>
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio import gr, gr_unittest
import correlator_cc_swig as correlator_cc

class qa_correlator_cc (gr_unittest.TestCase):

    def setUp (self):
        self.tb = gr.top_block ()

    def tearDown (self):
        self.tb = None

    randomSamples = ((+2+2j),(+2-2j),(-2-2j),(-2+2j),(-2+2j),(+2-2j),(+2+2j),(-2-2j),(+2-2j),(+2+2j))
    firstFrame = ((+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j))
    pnSequence = (                           (+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),
                           (+1+0j),(+1+0j),(+1+0j),(+0+1j),(+0-1j),(+1+0j),(-1+0j),(-1+0j),
                           (+0-1j),(-1+0j),(+0+1j),(+1+0j),(+0+1j),(-1+0j),(+0-1j),(+1+0j),
                           (-1+0j),(+1+0j),(+1+0j),(+0+1j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),
                           (+0-1j),(+0+1j),(+1+0j),(+1+0j),(+0-1j),(+0-1j),(-1+0j),(+1+0j),
                           (+1+0j),(+1+0j),(-1+0j),(+0+1j),(+0+1j),(+0-1j),(+0+1j),(+0-1j),
                           (-1+0j),(+0-1j),(+0+1j),(+0+1j),(+1+0j),(+0+1j),(+0+1j),(+0+1j),
                           (+0-1j),(+0-1j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+0+1j),(-1+0j),
                           (+1+0j),(+0+1j),(-1+0j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),(-1+0j),
                           (+0+1j),(+1+0j),(+0-1j),(+0+1j),(+1+0j),(+1+0j),(+0+1j),(+0+1j),
                           (+0-1j),(+1+0j),(-1+0j),(+0+1j),(-1+0j),(-1+0j),(+0+1j),(+0-1j),
                           (-1+0j),(+1+0j),(+0-1j),(+1+0j),(-1+0j),(-1+0j),(+0+1j),(+1+0j),
                           (+0-1j),(+0+1j),(+0-1j),(-1+0j),(+1+0j),(+1+0j),(+0+1j),(+1+0j),
                           (-1+0j),(-1+0j),(+0-1j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(-1+0j),
                           (+0+1j),(-1+0j),(+0-1j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(+1+0j),
                           (-1+0j),(-1+0j),(+0-1j),(+1+0j),(+0-1j),(+1+0j),(+1+0j),(+1+0j),
                           (+0-1j),(+0+1j),(+1+0j),(+0+1j),(+1+0j),(+0-1j),(+0-1j),(+0+1j),
                           (+0-1j),(+0-1j),(+1+0j),(+1+0j),(+0+1j),(+0-1j),(+0-1j),(+0-1j),
                           (-1+0j),(+0+1j),(+0+1j),(-1+0j),(-1+0j),(+0-1j),(+1+0j),(+0+1j),
                           (-1+0j),(+0-1j),(+0+1j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+0-1j),
                           (+0-1j),(+1+0j),(+0-1j),(+0+1j),(+0+1j),(-1+0j),(+1+0j),(+0+1j),
                           (+0+1j),(-1+0j),(+0+1j),(-1+0j),(+1+0j),(+0+1j),(+0-1j),(+1+0j),
                           (+0-1j),(+0+1j),(-1+0j),(+0+1j),(+1+0j),(-1+0j),(-1+0j),(+0-1j),
                           (+1+0j),(-1+0j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),(+0+1j),
                           (+1+0j),(+0-1j),(+0-1j),(-1+0j),(-1+0j),(+1+0j),(-1+0j),(+0-1j),
                           (+0-1j),(+0-1j),(-1+0j),(+0-1j),(+1+0j),(-1+0j),(+0+1j),(+1+0j),
                           (-1+0j),(+0-1j),(+1+0j),(+1+0j),(-1+0j),(-1+0j),(+1+0j),(+0-1j),
                           (+1+0j),(+0-1j),(+0+1j),(+1+0j),(+1+0j),(-1+0j),(+0-1j),(+0+1j),
                           (+0+1j),(+1+0j),(+1+0j),(+1+0j),(-1+0j),(-1+0j),(-1+0j),(+0+1j),
                           (+0-1j),(+1+0j),(+0-1j),(+0+1j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),
                           (-1+0j),(-1+0j),(-1+0j),(+1+0j),(+1+0j),(-1+0j),(+1+0j),(+0-1j),
                           (+1+0j),(+1+0j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+1+0j),)
    secondFrame = ((-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j))

    ####################################################################################
    #  test_001_t
    #
    #  Test the sequence:
    #     Random samples - should not correlate, and should all be dropped
    #     PN Sequence - should be detected, but not output
    #     First frame - should be output
    #     Random samples - should not correlate, and should all be dropped
    #     PN Sequence - should be detected, but not output
    #     First frame - should be output
    #
    #  Test passes if the two frames are passed to the output, but no other samples
    ####################################################################################

    def test_001_t (self):

        src_data = self.randomSamples + self.pnSequence + self.firstFrame + self.randomSamples + self.pnSequence + self.secondFrame
        expected_data = self.firstFrame + self.secondFrame
        source = gr.vector_source_c(src_data)
	dut = correlator_cc.correlator_cc()
        sink = gr.vector_sink_c()
        self.tb.connect(source, dut)
        self.tb.connect(dut, sink)
        self.tb.run()
        result_data = sink.data()
        #print expected_data
        #print result_data
        self.assertEqual(expected_data, result_data)


    ####################################################################################
    #  test_002_t
    #
    #  This is the same as test_001_t except that the samples are now rotated by pi/2
    #  before passed into the correlator block.  The correlator needs to derotate these
    #  samples before outputing.
    #
    #  Test the sequence:
    #     Random samples - should not correlate, and should all be dropped
    #     PN Sequence - should be detected, but not output
    #     First frame - should be output
    #     Random samples - should not correlate, and should all be dropped
    #     PN Sequence - should be detected, but not output
    #     First frame - should be output
    #
    #  Test passes if the two frames are passed to the output, but no other samples.
    #  The samples will have to be rotated back for the test to pass.
    ####################################################################################
    def xxst_002_t (self):

        src_data        = (
			   # Random samples
			   (+2+2j),(+2-2j),(-2-2j),(-2+2j),(-2+2j),(+2-2j),(+2+2j),(-2-2j),(+2-2j),(+2+2j),
			   # PN Sequence
                           (+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),
                           (+1+0j),(+1+0j),(+1+0j),(+0+1j),(+0-1j),(+1+0j),(-1+0j),(-1+0j),
                           (+0-1j),(-1+0j),(+0+1j),(+1+0j),(+0+1j),(-1+0j),(+0-1j),(+1+0j),
                           (-1+0j),(+1+0j),(+1+0j),(+0+1j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),
                           (+0-1j),(+0+1j),(+1+0j),(+1+0j),(+0-1j),(+0-1j),(-1+0j),(+1+0j),
                           (+1+0j),(+1+0j),(-1+0j),(+0+1j),(+0+1j),(+0-1j),(+0+1j),(+0-1j),
                           (-1+0j),(+0-1j),(+0+1j),(+0+1j),(+1+0j),(+0+1j),(+0+1j),(+0+1j),
                           (+0-1j),(+0-1j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+0+1j),(-1+0j),
                           (+1+0j),(+0+1j),(-1+0j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),(-1+0j),
                           (+0+1j),(+1+0j),(+0-1j),(+0+1j),(+1+0j),(+1+0j),(+0+1j),(+0+1j),
                           (+0-1j),(+1+0j),(-1+0j),(+0+1j),(-1+0j),(-1+0j),(+0+1j),(+0-1j),
                           (-1+0j),(+1+0j),(+0-1j),(+1+0j),(-1+0j),(-1+0j),(+0+1j),(+1+0j),
                           (+0-1j),(+0+1j),(+0-1j),(-1+0j),(+1+0j),(+1+0j),(+0+1j),(+1+0j),
                           (-1+0j),(-1+0j),(+0-1j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(-1+0j),
                           (+0+1j),(-1+0j),(+0-1j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(+1+0j),
                           (-1+0j),(-1+0j),(+0-1j),(+1+0j),(+0-1j),(+1+0j),(+1+0j),(+1+0j),
                           (+0-1j),(+0+1j),(+1+0j),(+0+1j),(+1+0j),(+0-1j),(+0-1j),(+0+1j),
                           (+0-1j),(+0-1j),(+1+0j),(+1+0j),(+0+1j),(+0-1j),(+0-1j),(+0-1j),
                           (-1+0j),(+0+1j),(+0+1j),(-1+0j),(-1+0j),(+0-1j),(+1+0j),(+0+1j),
                           (-1+0j),(+0-1j),(+0+1j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+0-1j),
                           (+0-1j),(+1+0j),(+0-1j),(+0+1j),(+0+1j),(-1+0j),(+1+0j),(+0+1j),
                           (+0+1j),(-1+0j),(+0+1j),(-1+0j),(+1+0j),(+0+1j),(+0-1j),(+1+0j),
                           (+0-1j),(+0+1j),(-1+0j),(+0+1j),(+1+0j),(-1+0j),(-1+0j),(+0-1j),
                           (+1+0j),(-1+0j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),(+0+1j),
                           (+1+0j),(+0-1j),(+0-1j),(-1+0j),(-1+0j),(+1+0j),(-1+0j),(+0-1j),
                           (+0-1j),(+0-1j),(-1+0j),(+0-1j),(+1+0j),(-1+0j),(+0+1j),(+1+0j),
                           (-1+0j),(+0-1j),(+1+0j),(+1+0j),(-1+0j),(-1+0j),(+1+0j),(+0-1j),
                           (+1+0j),(+0-1j),(+0+1j),(+1+0j),(+1+0j),(-1+0j),(+0-1j),(+0+1j),
                           (+0+1j),(+1+0j),(+1+0j),(+1+0j),(-1+0j),(-1+0j),(-1+0j),(+0+1j),
                           (+0-1j),(+1+0j),(+0-1j),(+0+1j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),
                           (-1+0j),(-1+0j),(-1+0j),(+1+0j),(+1+0j),(-1+0j),(+1+0j),(+0-1j),
                           (+1+0j),(+1+0j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+1+0j),
			   # First frame data
			   (+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),
			   # Random samples
			   (+2+2j),(+2-2j),(-2-2j),(-2+2j),(-2+2j),(+2-2j),(+2+2j),(-2-2j),(+2-2j),(+2+2j),
			   # PN Sequence
                           (+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),(+0-1j),
                           (+1+0j),(+1+0j),(+1+0j),(+0+1j),(+0-1j),(+1+0j),(-1+0j),(-1+0j),
                           (+0-1j),(-1+0j),(+0+1j),(+1+0j),(+0+1j),(-1+0j),(+0-1j),(+1+0j),
                           (-1+0j),(+1+0j),(+1+0j),(+0+1j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),
                           (+0-1j),(+0+1j),(+1+0j),(+1+0j),(+0-1j),(+0-1j),(-1+0j),(+1+0j),
                           (+1+0j),(+1+0j),(-1+0j),(+0+1j),(+0+1j),(+0-1j),(+0+1j),(+0-1j),
                           (-1+0j),(+0-1j),(+0+1j),(+0+1j),(+1+0j),(+0+1j),(+0+1j),(+0+1j),
                           (+0-1j),(+0-1j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+0+1j),(-1+0j),
                           (+1+0j),(+0+1j),(-1+0j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),(-1+0j),
                           (+0+1j),(+1+0j),(+0-1j),(+0+1j),(+1+0j),(+1+0j),(+0+1j),(+0+1j),
                           (+0-1j),(+1+0j),(-1+0j),(+0+1j),(-1+0j),(-1+0j),(+0+1j),(+0-1j),
                           (-1+0j),(+1+0j),(+0-1j),(+1+0j),(-1+0j),(-1+0j),(+0+1j),(+1+0j),
                           (+0-1j),(+0+1j),(+0-1j),(-1+0j),(+1+0j),(+1+0j),(+0+1j),(+1+0j),
                           (-1+0j),(-1+0j),(+0-1j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(-1+0j),
                           (+0+1j),(-1+0j),(+0-1j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(+1+0j),
                           (-1+0j),(-1+0j),(+0-1j),(+1+0j),(+0-1j),(+1+0j),(+1+0j),(+1+0j),
                           (+0-1j),(+0+1j),(+1+0j),(+0+1j),(+1+0j),(+0-1j),(+0-1j),(+0+1j),
                           (+0-1j),(+0-1j),(+1+0j),(+1+0j),(+0+1j),(+0-1j),(+0-1j),(+0-1j),
                           (-1+0j),(+0+1j),(+0+1j),(-1+0j),(-1+0j),(+0-1j),(+1+0j),(+0+1j),
                           (-1+0j),(+0-1j),(+0+1j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+0-1j),
                           (+0-1j),(+1+0j),(+0-1j),(+0+1j),(+0+1j),(-1+0j),(+1+0j),(+0+1j),
                           (+0+1j),(-1+0j),(+0+1j),(-1+0j),(+1+0j),(+0+1j),(+0-1j),(+1+0j),
                           (+0-1j),(+0+1j),(-1+0j),(+0+1j),(+1+0j),(-1+0j),(-1+0j),(+0-1j),
                           (+1+0j),(-1+0j),(+0-1j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),(+0+1j),
                           (+1+0j),(+0-1j),(+0-1j),(-1+0j),(-1+0j),(+1+0j),(-1+0j),(+0-1j),
                           (+0-1j),(+0-1j),(-1+0j),(+0-1j),(+1+0j),(-1+0j),(+0+1j),(+1+0j),
                           (-1+0j),(+0-1j),(+1+0j),(+1+0j),(-1+0j),(-1+0j),(+1+0j),(+0-1j),
                           (+1+0j),(+0-1j),(+0+1j),(+1+0j),(+1+0j),(-1+0j),(+0-1j),(+0+1j),
                           (+0+1j),(+1+0j),(+1+0j),(+1+0j),(-1+0j),(-1+0j),(-1+0j),(+0+1j),
                           (+0-1j),(+1+0j),(+0-1j),(+0+1j),(+0-1j),(+0+1j),(-1+0j),(+0-1j),
                           (-1+0j),(-1+0j),(-1+0j),(+1+0j),(+1+0j),(-1+0j),(+1+0j),(+0-1j),
                           (+1+0j),(+1+0j),(+0+1j),(+1+0j),(+0-1j),(+1+0j),(+1+0j),
			   # Second frame data
			   (-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j))
        expected_data   = ((+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),(+1+0j),
			   (-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j),(-1+0j))

        # Rotate the samples by pi/2
        source = gr.vector_source_c(tuple([z * (0+1j) for z in src_data]))
	dut = correlator_cc.correlator_cc()
        sink = gr.vector_sink_c()
        self.tb.connect(source, dut)
        self.tb.connect(dut, sink)
        self.tb.run()
        result_data = sink.data()
        #print expected_data
        #print result_data
        self.assertEqual(expected_data, result_data)

if __name__ == '__main__':
    gr_unittest.run(qa_correlator_cc, "qa_correlator_cc.xml")
