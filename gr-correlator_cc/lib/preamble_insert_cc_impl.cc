/* -*- c++ -*- */
/* 
 * Copyright 2013 TRITONS
 *
 * <<<=================================================================>>>
 * <<<=================================================================>>>
 * <<< This file is autogenerated from pngen.pl.  Do not edit directly >>>
 * <<<=================================================================>>>
 * <<<=================================================================>>>
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gr_io_signature.h>
#include "preamble_insert_cc_impl.h"
#include <stdio.h>
#include "TRITONS.h"

namespace gr {
namespace correlator_cc {

static const int MIN_IN = 1;  // mininum number of input streams
static const int MAX_IN = 1;  // maximum number of input streams
static const int MIN_OUT = 1; // minimum number of output streams
static const int MAX_OUT = 1; // maximum number of output streams

//Taps: [ 8 6 5 4 ]
const int preamble_insert_cc_impl::_sequenceI[255] = {
   +0, +0, +0, +0, +0, +0, +0, +0, +1, +1, +1, +0, +0, +1, -1, -1, 
   +0, -1, +0, +1, +0, -1, +0, +1, -1, +1, +1, +0, +1, +1, +1, +1, 
   +0, +0, +1, +1, +0, +0, -1, +1, +1, +1, -1, +0, +0, +0, +0, +0, 
   -1, +0, +0, +0, +1, +0, +0, +0, +0, +0, +0, +1, +0, +1, +0, -1, 
   +1, +0, -1, +0, +0, -1, +0, -1, +0, +1, +0, +0, +1, +1, +0, +0, 
   +0, +1, -1, +0, -1, -1, +0, +0, -1, +1, +0, +1, -1, -1, +0, +1, 
   +0, +0, +0, -1, +1, +1, +0, +1, -1, -1, +0, +0, +0, +0, -1, -1, 
   +0, -1, +0, +0, +0, +0, -1, +1, -1, -1, +0, +1, +0, +1, +1, +1, 
   +0, +0, +1, +0, +1, +0, +0, +0, +0, +0, +1, +1, +0, +0, +0, +0, 
   -1, +0, +0, -1, -1, +0, +1, +0, -1, +0, +0, +0, +1, +0, +1, +0, 
   +0, +1, +0, +0, +0, -1, +1, +0, +0, -1, +0, -1, +1, +0, +0, +1, 
   +0, +0, -1, +0, +1, -1, -1, +0, +1, -1, +0, +0, +0, -1, +0, +0, 
   +1, +0, +0, -1, -1, +1, -1, +0, +0, +0, -1, +0, +1, -1, +0, +1, 
   -1, +0, +1, +1, -1, -1, +1, +0, +1, +0, +0, +1, +1, -1, +0, +0, 
   +0, +1, +1, +1, -1, -1, -1, +0, +0, +1, +0, +0, +0, +0, -1, +0, 
   -1, -1, -1, +1, +1, -1, +1, +0, +1, +1, +0, +1, +0, +1, +1
};
//Taps: [ 8 6 5 3 ]
const int preamble_insert_cc_impl::_sequenceQ[255] = {
   -1, -1, -1, -1, -1, -1, -1, -1, +0, +0, +0, +1, -1, +0, +0, +0, 
   -1, +0, +1, +0, +1, +0, -1, +0, +0, +0, +0, +1, +0, +0, +0, +0, 
   -1, +1, +0, +0, -1, -1, +0, +0, +0, +0, +0, +1, +1, -1, +1, -1, 
   +0, -1, +1, +1, +0, +1, +1, +1, -1, -1, +1, +0, -1, +0, +1, +0, 
   +0, +1, +0, -1, +1, +0, -1, +0, +1, +0, -1, +1, +0, +0, +1, +1, 
   -1, +0, +0, +1, +0, +0, +1, -1, +0, +0, -1, +0, +0, +0, +1, +0, 
   -1, +1, -1, +0, +0, +0, +1, +0, +0, +0, -1, -1, -1, +1, +0, +0, 
   +1, +0, -1, -1, -1, +1, +0, +0, +0, +0, -1, +0, -1, +0, +0, +0, 
   -1, +1, +0, +1, +0, -1, -1, +1, -1, -1, +0, +0, +1, -1, -1, -1, 
   +0, +1, +1, +0, +0, -1, +0, +1, +0, -1, +1, +1, +0, -1, +0, -1, 
   -1, +0, -1, +1, +1, +0, +0, +1, +1, +0, +1, +0, +0, +1, -1, +0, 
   -1, +1, +0, +1, +0, +0, +0, -1, +0, +0, -1, -1, +1, +0, -1, +1, 
   +0, -1, -1, +0, +0, +0, +0, -1, -1, -1, +0, -1, +0, +0, +1, +0, 
   +0, -1, +0, +0, +0, +0, +0, -1, +0, -1, +1, +0, +0, +0, -1, +1, 
   +1, +0, +0, +0, +0, +0, +0, +1, -1, +0, -1, +1, -1, +1, +0, -1, 
   +0, +0, +0, +0, +0, +0, +0, -1, +0, +0, +1, +0, -1, +0, +0
};

preamble_insert_cc::sptr
preamble_insert_cc::make()
{
   return gnuradio::get_initial_sptr (new preamble_insert_cc_impl());
}

preamble_insert_cc_impl::preamble_insert_cc_impl()
  : gr_block("preamble_insert_cc",
		   gr_make_io_signature(MIN_IN, MAX_IN, sizeof (gr_complex)),
		   gr_make_io_signature(MIN_IN, MAX_IN, sizeof (gr_complex)))
{
   set_min_noutput_items((CODE_LENGTH+CAPSULE_SYMBOL_LENGTH)*2);
   set_max_noutput_items((CODE_LENGTH+CAPSULE_SYMBOL_LENGTH)*2);

   for(int i=0; i<CODE_LENGTH; ++i)
   {
      _sequenceIQ[i] = gr_complex(_sequenceI[i], _sequenceQ[i]);
   }
}

preamble_insert_cc_impl::~preamble_insert_cc_impl()
{
}

void
preamble_insert_cc_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
   ninput_items_required[0] = CAPSULE_SYMBOL_LENGTH;
}

int
preamble_insert_cc_impl::general_work (int noutput_items,
		    gr_vector_int &ninput_items,
		    gr_vector_const_void_star &input_items,
		    gr_vector_void_star &output_items)
{
   const gr_complex* in = reinterpret_cast<const gr_complex*>(input_items[0]);
   gr_complex *out = reinterpret_cast<gr_complex*>(output_items[0]);
   int samplesOutput = 0;
   int samplesRead = ninput_items[0];

   if (samplesRead > CAPSULE_SYMBOL_LENGTH)
   {
      samplesRead = CAPSULE_SYMBOL_LENGTH;
   }

   for(int i=0; i<CODE_LENGTH; ++i)
   {
	 out[samplesOutput++] = _sequenceIQ[i];
	 out[samplesOutput++] = _sequenceIQ[i];
   }

   for(int i=0; i<samplesRead; ++i)
   {
	 out[samplesOutput++] = in[i];
	 out[samplesOutput++] = in[i];
   }

   // Tell runtime system how many input items we consumed on each input stream.
   consume_each (samplesRead);

   // Tell runtime system how many output items we produced.
   return samplesOutput;
}

} /* namespace correlator_cc */
} /* namespace gr */

